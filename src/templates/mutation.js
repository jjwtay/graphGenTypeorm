/// <reference path="../../node_modules/graphschematojson/src/types.d.ts"/>

import {getColumns, getEntities, getRelColumns, fieldIsPrimary } from '../entity'
import { isAutoGenerated } from '../column'


/**
 * 
 * @param {Field} field 
 * @param {boolean} create
 * @return {string}
 */
export const fieldType = (field, create = true) =>
    `${field.isList ? '[' : ''}Update${field.type}Input${field.isList ? ']' : ''}`

/**
 * @function
 * @param {Field} field 
 * @param {boolean} create
 * @return {boolean}
 */
export const isRequired = (field, create = true) => {

    if (fieldIsPrimary(field) && create) {
        return false
    } else if (fieldIsPrimary(field)) {
        return true
    }
    if (!field.isNullable && create) {
        return true
    }
    return false
}
/**
 * @function
 * @param {Field} field 
 * @param {boolean} create 
 * @return {string}
 */
export const fieldRequired = (field, create = true) => isRequired(field, create) ? '!' : ''

/**
 * @function
 * @param {string} name 
 * @param {Field} field
 * @param {boolean} create
 * @return {string}
 */
export const createMutationInputField = (name, field, create = true) => 
    `    ${name}: ${fieldType(field, create)}${fieldRequired(field, create)}`

/**
 * @function
 * @param {string} name 
 * @param {Object.<string, Type | Enum>} types
 * @return {string}
 */
export const createMutationInputs = (name, types) =>

`
input Create${name}Input {
${Object.keys(getColumns(types[name]))
    .filter(fieldKey => !isAutoGenerated(types[name].fields[fieldKey]))
    .map(fieldKey => `    ${fieldKey}: ${types[name].fields[fieldKey].type}${fieldRequired(types[name].fields[fieldKey], true)}`).join('\n')
}
${Object.keys(getRelColumns(types[name]))
    .map(fieldKey => createMutationInputField(fieldKey, types[name].fields[fieldKey])).join('\n')
}
}`

/**
 * @function
 * @param {string} name 
 * @param {Object.<string, Type | Enum>} types 
 * @return {string}
 */
export const updateMutationInputs = (name, types) =>

`
input Update${name}Input {
${Object.keys(getColumns(types[name]))
    .map(fieldKey => `    ${fieldKey}: ${types[name].fields[fieldKey].type}${fieldRequired(types[name].fields[fieldKey], false)}`).join('\n')
}
${Object.keys(getRelColumns(types[name]))
    .map(fieldKey => createMutationInputField(fieldKey, types[name].fields[fieldKey], false)).join('\n')
}
}`

/**
 * @function
 * @param {string} name 
 * @param {Type} model 
 * @return {string}
 */
export const createMutation = (name, model) =>

`
    create${name}(data: Create${name}Input): ${name}
    update${name}(data: Update${name}Input): ${name}
    delete${name}(id: Int): Int`


export default (/** @type {Object.<string, Type | Enum>} */types) =>

`
${Object.keys(getEntities(types)).map(typeKey => createMutationInputs(typeKey, types)).join('\n')}
${Object.keys(getEntities(types)).map(typeKey => updateMutationInputs(typeKey, types)).join('\n')}

type Mutation {
${Object.keys(getEntities(types))
    .map(typeKey =>
        createMutation(
            typeKey,
            /** @type {Type} */(types[typeKey])
        )
    ).join('\n')
}
}
`